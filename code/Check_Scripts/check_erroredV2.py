#!/usr/bin/env python3
"""
This script moves errored files to categorized subdirectories under 'errored/',
based on entries from various error category CSV files generated by updatelists.py.

Requires:
- updatelists.py to be run beforehand
- Error category CSV files to exist

Author: Marcus Djokic
Institution: Michigan State University, Mendoza Group
"""
import os
import shutil
import pandas as pd

# === Configuration === #
base_dir = os.path.abspath(os.path.dirname(__file__))

# Error categories to process (from ERROR_PATTERNS in updatelists.py)
error_categories = [
    "too_many_scf",
    "memory",
    "quota",
    "time",
    "geometry_small_dist",
    "shrink_error",
    "linear_basis",
    "potential",
    "unknown"  # Also including unknown errors
]

# File extensions to move
extensions = [".sh", ".out", ".d12", ".f9"]

# === Process each error category === #
for category in error_categories:
    csv_path = os.path.join(base_dir, f"{category}_list.csv")
    
    # Skip if CSV doesn't exist
    if not os.path.exists(csv_path):
        print(f"Skipping {category}: {csv_path} not found.")
        continue
    
    # Create subdirectory for this category
    category_dir = os.path.join(base_dir, "errored", category)
    os.makedirs(category_dir, exist_ok=True)
    
    # Load file list
    data_files = pd.read_csv(csv_path)
    print(f"\nProcessing {category}: Found {len(data_files)} structures")
    
    # Process and move files
    for row in data_files.itertuples(index=False):
        base_name = row.data_files
        print(f"  Moving files for: {base_name}")
        
        moved_any = False
        for ext in extensions:
            src = os.path.join(base_dir, base_name + ext)
            dest = os.path.join(category_dir, base_name + ext)
            
            if os.path.exists(src):
                shutil.move(src, dest)
                print(f"    Moved: {base_name + ext}")
                moved_any = True
            # Don't print anything for missing files - this is normal for early errors
        
        if moved_any:
            print(f"    ✓ Moved available files for {base_name}")
        else:
            print(f"    ⚠ No files found for {base_name} (may have been moved already)")

print("\nDone moving errored job files.")
