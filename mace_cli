#!/usr/bin/env python3
"""
MACE - Mendoza Automated CRYSTAL Engine
=======================================

Main entry point for the MACE workflow management system.

This script provides a unified interface to all MACE functionality,
including workflow planning, execution, monitoring, and analysis.

Developed by: Marcus Djokic
Contributors: Daniel Maldonado Lopez, Brandon Lewis, William Comaskey
Advisor: Prof. Jose Luis Mendoza-Cortes
Institution: Michigan State University, Mendoza Group
"""

import sys
import os
import argparse
from pathlib import Path

# Version information
__version__ = "1.0.0"

# Add MACE package to Python path
MACE_DIR = Path(__file__).parent / "mace"
sys.path.insert(0, str(MACE_DIR))

# Import animation and credits
try:
    from utils.animation import animate_mace_assembly, loading_bar
    from utils.banner import get_credits, print_banner
    BANNER_AVAILABLE = True
except ImportError:
    BANNER_AVAILABLE = False

def show_banner():
    """Show the MACE animated banner and credits"""
    # Check environment variable in case we're called from a subprocess
    if os.environ.get('MACE_NO_BANNER', '').lower() in ('1', 'true', 'yes'):
        return
        
    if BANNER_AVAILABLE:
        print()
        animate_mace_assembly(__version__)
        loading_bar(1.0, "Initializing MACE Workflow System")
        print(get_credits())
    else:
        print("\nMACE - Mendoza Automated CRYSTAL Engine")
        print(f"Version {__version__}")
        print("=" * 40)

def show_command_help(command):
    """Show help for a specific command"""
    help_text = {
        'workflow': """
Usage: mace workflow [options]

Run the MACE workflow planning and execution system.

Options:
  --interactive         Start interactive workflow planning
  --quick-start         Quick start with predefined templates
  --execute FILE        Execute a saved workflow plan
  --status              Check workflow status
  --show-templates      Display available workflow templates
  --cif-dir DIR         Directory containing CIF files (for quick start)
  --d12-dir DIR         Directory containing D12 files (for quick start)
  --workflow TYPE       Workflow template: basic_opt, opt_sp, full_electronic, 
                        double_opt, complete, transport_analysis, charge_analysis,
                        combined_analysis (default: full_electronic)
  --work-dir DIR        Working directory (default: current directory)
  --db-path PATH        Database path (default: materials.db)
  --max-jobs N          Maximum concurrent jobs (default: 200)

Examples:
  mace workflow --interactive
  mace workflow --quick-start --cif-dir ./cifs --workflow full_electronic
  mace workflow --execute workflow_plan_20250618_145837.json
  mace workflow --status
  mace workflow --show-templates
""",
        'submit': """
Usage: mace submit <file_or_directory>

Submit CRYSTAL calculations to the queue.

Arguments:
  file_or_directory     D12/D3 file(s) or directory to submit

Examples:
  mace submit calculation.d12
  mace submit property.d3
  mace submit my_calculations/

Note: This command submits files using the appropriate submission script
(submitcrystal23.sh for D12 files, submit_prop.sh for D3 files).
For directories with mixed file types, you'll be prompted to choose.
Additional options like --max-jobs are not implemented in this wrapper.
""",
        'monitor': """
Usage: mace monitor [options]

Monitor running calculations and view system status.

Options:
  --dashboard           Launch real-time monitoring dashboard (default)
  --status              Show quick status summary
  --summary             Show minimal status (materials and total calculations only)
  --detailed            Show detailed status with calculation types and recent activity
  --material-id ID      Show status for specific material
  --interval N          Dashboard update interval in seconds (default: 30)

Examples:
  mace monitor                    # Real-time dashboard
  mace monitor --status           # Quick status check
  mace monitor --status --detailed # Detailed status with recent activity
  mace monitor --status --summary  # Minimal summary only
""",
        'analyze': """
Usage: mace analyze --extract-properties <directory>

Extract properties from CRYSTAL output files.

Options:
  --extract-properties DIR    Directory containing output files (required)

Examples:
  mace analyze --extract-properties .
  mace analyze --extract-properties outputs/

Note: This command extracts properties and stores them in the materials database.
Additional options like --material-id and --output-csv shown in some docs
require calling the property_extractor.py script directly.
""",
        'convert': """
Usage: mace convert <cif_files> [options]

Convert CIF files to CRYSTAL D12 input format.
Runs NewCifToD12.py with all its options.

Examples:
  mace convert structure.cif
  mace convert *.cif
  mace convert structures/ --functional B3LYP --basis POB-TZVP

For full options, the command will show NewCifToD12.py help when run without arguments.
""",
        'opt2d12': """
Usage: mace opt2d12 <output_file> [options]

Generate D12 input files from optimized CRYSTAL output.
Runs CRYSTALOptToD12.py with all its options.

Examples:
  mace opt2d12 optimized.out
  mace opt2d12 calculation.out --sp
  mace opt2d12 calculation.out --freq
  mace opt2d12 calculation.out --both

For full options, the command will show CRYSTALOptToD12.py help when run without arguments.
""",
        'opt2d3': """
Usage: mace opt2d3 <output_file> --calc-type TYPE [options]

Generate D3 property input files from CRYSTAL output.
Runs CRYSTALOptToD3.py with all its options.

Examples:
  mace opt2d3 optimized.out --calc-type BAND
  mace opt2d3 optimized.out --calc-type DOSS
  mace opt2d3 optimized.out --calc-type ALL --mode advanced

For full options, the command will show CRYSTALOptToD3.py help when run without arguments.
""",
        'manager': """
Usage: mace manager [options]

Enhanced CRYSTAL Queue Manager with material tracking and workflow automation.

Options:
  --status              Show current queue status
  --d12-dir DIR         Directory with D12 files (default: current directory)
  --max-jobs N          Maximum concurrent jobs (default: 250)
  --reserve N           Reserved job slots (default: 30)
  --callback-mode MODE  Callback mode for completion handling
  --dry-run             Show what would be submitted without actually submitting

Examples:
  mace manager --status                              # Check queue status
  mace manager --d12-dir /path/to/calculations      # Run queue manager
  mace manager --max-jobs 200 --reserve 20          # Custom job limits
  mace manager --callback-mode completion            # Run in callback mode

Note: This runs the Enhanced Queue Manager (queue/manager.py) which requires SLURM.
""",
        'queue': """
Usage: mace queue [options]

Deprecated: Use 'mace manager' instead.
This command will be removed in a future version.
""",
        'recover': """
Usage: mace recover [options]

Automated error recovery for failed CRYSTAL calculations.

Options:
  --action ACTION       Action to perform: recover, stats, config (default: recover)
  --max-recoveries N    Maximum number of recoveries to attempt (default: 10)
  --config FILE         Path to recovery configuration file
  --create-config       Create default recovery configuration

Examples:
  mace recover
  mace recover --action stats
  mace recover --max-recoveries 5
  mace recover --create-config
""",
        'database': """
Usage: mace database [options]

Database management and queries for material tracking.

Options:
  --action ACTION       Action: query, export, stats (default: stats)
  --material-id ID      Query specific material
  --calc-type TYPE      Filter by calculation type (not implemented yet)
  --status STATUS       Filter by calculation status (not implemented yet)
  --export-csv FILE     Export results to CSV (for --action export)

Examples:
  mace database                                      # Show statistics
  mace database --action stats                       # Show statistics
  mace database --action query --material-id diamond # Query specific material
  mace database --action query                       # List all materials
  mace database --action export --export-csv results.csv

Note: The 'clean' action is not yet implemented.
""",
        'engine': """
Usage: mace engine [options]

Workflow automation engine for managing calculation progressions.

Options:
  --action ACTION       Action: status, process, workflow (default: status)
  --material-id ID      Material ID for status checking
  --db PATH             Path to materials database (default: materials.db)
  --work-dir DIR        Base working directory (default: current directory)

Examples:
  mace engine                                    # Show workflow status
  mace engine --action process                   # Process pending workflows
  mace engine --action status --material-id diamond
  mace engine --action workflow                  # Show workflow templates

Note: The --dry-run option shown in some docs is not implemented.
"""
    }
    
    if command in help_text:
        print(help_text[command])
    else:
        print(f"No help available for command: {command}")

def main():
    """Main entry point with proper argument parsing"""
    # Special handling for commands that should pass through directly
    passthrough_commands = ['convert', 'opt2d12', 'opt2d3']
    
    # Handle --no-banner if it's the first argument
    no_banner_first = False
    if len(sys.argv) >= 2 and sys.argv[1] == '--no-banner':
        no_banner_first = True
        os.environ['MACE_NO_BANNER'] = '1'
        # Remove --no-banner and shift arguments
        sys.argv = [sys.argv[0]] + sys.argv[2:]
    
    # Check if we have a passthrough command
    if len(sys.argv) >= 2 and sys.argv[1] in passthrough_commands:
        # For passthrough commands, skip our argument parsing and go directly to the command
        command = sys.argv[1]
        
        # Check if --no-banner or --help is present
        suppress_banner = no_banner_first or '--no-banner' in sys.argv or '--help' in sys.argv or '-h' in sys.argv
        
        # Set --no-banner if needed
        if '--no-banner' in sys.argv:
            os.environ['MACE_NO_BANNER'] = '1'
            # Remove --no-banner from args passed to subcommand
            sys.argv = [arg for arg in sys.argv if arg != '--no-banner']
        
        # Show banner unless suppressed
        if not suppress_banner:
            show_banner()
        
        # Execute the command
        if command == 'convert':
            sys.path.insert(0, str(Path(__file__).parent / "Crystal_d12"))
            from NewCifToD12 import main as cif_main
            sys.argv = ['NewCifToD12.py'] + sys.argv[2:]
            cif_main()
        elif command == 'opt2d12':
            sys.path.insert(0, str(Path(__file__).parent / "Crystal_d12"))
            from CRYSTALOptToD12 import main as opt2d12_main
            sys.argv = ['CRYSTALOptToD12.py'] + sys.argv[2:]
            opt2d12_main()
        elif command == 'opt2d3':
            sys.path.insert(0, str(Path(__file__).parent / "Crystal_d3"))
            from CRYSTALOptToD3 import main as opt2d3_main
            sys.argv = ['CRYSTALOptToD3.py'] + sys.argv[2:]
            opt2d3_main()
        sys.exit(0)
    
    # Check if asking for help on a specific command (for non-passthrough commands)
    if len(sys.argv) >= 3 and sys.argv[2] == '--help' and sys.argv[1] in ['workflow', 'submit', 'monitor', 'analyze', 'status', 'queue', 'manager', 'recover', 'database', 'engine']:
        # Show command-specific help
        show_command_help(sys.argv[1])
        sys.exit(0)
    
    parser = argparse.ArgumentParser(
        description=f"MACE - Mendoza Automated CRYSTAL Engine (v{__version__})",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Commands:
  workflow    Interactive workflow planner - design and execute complex calculation sequences
  submit      Submit calculations to queue - handles both D12 and D3 files automatically
  monitor     System monitoring - real-time dashboard or quick status (--status, --detailed, --summary)
  analyze     Extract properties from outputs - band gaps, energies, convergence data
  convert     CIF to D12 conversion - supports all CRYSTAL basis sets and functionals
  opt2d12     Generate D12 from optimized output - create SP/FREQ inputs from OPT results
  opt2d3      Generate D3 property inputs - BAND, DOSS, TRANSPORT, CHARGE calculations
  manager     Enhanced Queue Manager - material tracking, workflow automation, SLURM integration
  recover     Error recovery - automated fixes for SHRINK, memory, and convergence issues
  database    Database queries - search materials, export results, view statistics
  engine      Workflow automation - manages OPT→SP→BAND progression automatically
  
Quick Start:
  mace workflow --interactive      # Plan new workflow
  mace monitor                     # Live dashboard
  mace monitor --status            # Quick status check
  
More Help:
  mace <command> --help           # Command details
"""
    )
    
    parser.add_argument('command', nargs='?', 
                       choices=['workflow', 'submit', 'monitor', 'analyze', 'convert', 'opt2d12', 'opt2d3', 
                               'status', 'queue', 'manager', 'recover', 'database', 'engine', 'credits', 'version'],
                       help='Command to run')
    parser.add_argument('args', nargs='*', help='Arguments for the command')
    parser.add_argument('--no-banner', action='store_true', help='Suppress ASCII art banner')
    parser.add_argument('--version', action='version', version=f'MACE v{__version__}')
    parser.add_argument('--credits', action='store_true', help='Show developer credits')
    
    # Parse known args to handle the main command
    args, remaining = parser.parse_known_args()
    
    # Handle --credits flag
    if args.credits:
        if BANNER_AVAILABLE and not args.no_banner:
            print_banner('banner')
            print(get_credits())
        elif BANNER_AVAILABLE:
            # Just show credits without banner
            print(get_credits())
        else:
            print("\nMACE Development Team:")
            print("Primary Developer: Marcus Djokic")
            print("Contributors: Daniel Maldonado Lopez, Brandon Lewis, William Comaskey")
            print("PI: Prof. Jose Luis Mendoza-Cortes")
        sys.exit(0)
    
    # Set environment variable for child processes
    if args.no_banner:
        os.environ['MACE_NO_BANNER'] = '1'
    
    # Show banner unless suppressed or showing help or running with arguments
    if not args.no_banner and args.command and args.command != 'version' and not args.args:
        show_banner()
    
    # If no command, show help
    if not args.command:
        if '--help' not in sys.argv and '-h' not in sys.argv and not args.no_banner:
            # Show main banner for help
            if BANNER_AVAILABLE:
                print_banner('banner')  # Use main banner instead of compact
        parser.print_help()
        sys.exit(0)
    
    # Reconstruct sys.argv for the subcommands, preserving --no-banner if present
    sys.argv = [sys.argv[0]] + args.args + remaining
    if args.no_banner and '--no-banner' not in sys.argv:
        sys.argv.append('--no-banner')
    
    # Handle commands
    if args.command == 'workflow':
        # Default to run_mace.py
        from run_mace import main as run_mace_main
        run_mace_main()
        
    elif args.command == 'submit':
        # Handle submission commands
        if not args.args:
            print("Usage: mace submit <file_or_directory>")
            sys.exit(1)
        
        target = args.args[0]
        
        # Check what type of files we're dealing with
        if os.path.isfile(target):
            # Single file submission
            sys.argv = ['submit_script', target]
            if target.endswith('.d3'):
                from submission.properties import main as submit_properties
                submit_properties()
            elif target.endswith('.d12'):
                from submission.crystal import main as submit_crystal
                submit_crystal()
            else:
                print(f"Error: {target} is not a D12 or D3 file")
                sys.exit(1)
        
        elif os.path.isdir(target):
            # Directory submission - check what files are present
            files = os.listdir(target)
            d12_files = [f for f in files if f.endswith('.d12') and os.path.isfile(os.path.join(target, f))]
            d3_files = [f for f in files if f.endswith('.d3') and os.path.isfile(os.path.join(target, f))]
            
            if not d12_files and not d3_files:
                print(f"No D12 or D3 files found in {target}")
                sys.exit(1)
            
            # Handle mixed directories
            if d12_files and d3_files:
                print(f"\nFound both D12 and D3 files in {target}:")
                print(f"  {len(d12_files)} D12 file(s) (CRYSTAL calculations)")
                print(f"  {len(d3_files)} D3 file(s) (property calculations)")
                print("\nWhat would you like to submit?")
                print("1. D12 files only")
                print("2. D3 files only")
                print("3. Both D12 and D3 files")
                
                choice = input("\nSelect option (1-3): ").strip()
                
                if choice == '1':
                    # Submit D12 only
                    sys.argv = ['submit_script', target]
                    from submission.crystal import main as submit_crystal
                    submit_crystal()
                elif choice == '2':
                    # Submit D3 only
                    sys.argv = ['submit_script', target]
                    from submission.properties import main as submit_properties
                    submit_properties()
                elif choice == '3':
                    # Submit both
                    print("\n=== Submitting D12 files ===")
                    sys.argv = ['submit_script', target]
                    from submission.crystal import main as submit_crystal
                    submit_crystal()
                    
                    print("\n=== Submitting D3 files ===")
                    sys.argv = ['submit_script', target]
                    from submission.properties import main as submit_properties
                    submit_properties()
                else:
                    print("Invalid choice. Exiting.")
                    sys.exit(1)
            
            elif d12_files:
                # Only D12 files
                sys.argv = ['submit_script', target]
                from submission.crystal import main as submit_crystal
                submit_crystal()
            
            else:
                # Only D3 files
                sys.argv = ['submit_script', target]
                from submission.properties import main as submit_properties
                submit_properties()
        
        else:
            print(f"Error: {target} is not a valid file or directory")
            sys.exit(1)
            
    elif args.command == 'monitor':
        # Launch monitoring dashboard or show status
        # Combine all arguments
        all_args = args.args + remaining
        
        # Check if we should show quick status instead of dashboard
        if '--status' in all_args or '--summary' in all_args or '--detailed' in all_args:
            # Show status information
            from database.materials_contextual import ContextualMaterialDatabase
            from workflow.context import get_current_context
            
            # Parse status arguments
            material_id = None
            workflow_id = None
            detailed = '--detailed' in all_args
            summary = '--summary' in all_args
            
            i = 0
            while i < len(all_args):
                if all_args[i] == '--material-id' and i + 1 < len(all_args):
                    material_id = all_args[i + 1]
                    i += 2
                elif all_args[i] == '--workflow-id' and i + 1 < len(all_args):
                    workflow_id = all_args[i + 1]
                    i += 2
                else:
                    i += 1
            
            # Initialize database
            db = ContextualMaterialDatabase()
            
            # Show context information
            ctx = get_current_context()
            if ctx:
                print(f"\n=== MACE Status (Workflow: {ctx.workflow_id}) ===")
                print(f"Isolation Mode: {ctx.isolation_mode}")
                print(f"Database: {ctx.db_path}")
            else:
                print("\n=== MACE Status ===")
            
            # Get statistics
            stats = db.get_database_stats()
            print(f"\nMaterials: {stats.get('total_materials', 0)}")
            
            # Calculate total calculations
            status_dist = stats.get('calculations_by_status', {})
            total_calcs = sum(status_dist.values())
            print(f"Calculations: {total_calcs}")
            
            # Show status distribution
            if status_dist and not summary:
                print(f"  Pending: {status_dist.get('pending', 0)}")
                print(f"  Running: {status_dist.get('running', 0)}")  
                print(f"  Completed: {status_dist.get('completed', 0)}")
                print(f"  Failed: {status_dist.get('failed', 0)}")
            
            if detailed and not summary:
                # Show calculation types
                calc_types = stats.get('calculations_by_type', {})
                if calc_types:
                    print("\nCalculation Types:")
                    for calc_type, count in calc_types.items():
                        print(f"  {calc_type}: {count}")
                
                # Show recent activity
                recent_calcs = db.get_recent_calculations(limit=10)
                if recent_calcs:
                    print("\nRecent Activity:")
                    for calc in recent_calcs:
                        print(f"  {calc['calc_id']} ({calc['material_id']}): {calc['status']}")
                        if calc.get('error_message'):
                            print(f"    Error: {calc['error_message']}")
            
            elif not summary:
                # Standard view - show last 5 calculations
                recent_calcs = db.get_recent_calculations(limit=5)
                if recent_calcs:
                    print("\nRecent Activity:")
                    for calc in recent_calcs:
                        print(f"  {calc['calc_id']} ({calc['material_id']}): {calc['status']}")
            
        else:
            # Run normal monitor dashboard
            from material_monitor import main as monitor_main
            if not any(arg in all_args for arg in ['--action']):
                # Default to dashboard if no specific action
                sys.argv = ['material_monitor.py', '--action', 'dashboard'] + all_args
            else:
                # Pass through all arguments
                sys.argv = ['material_monitor.py'] + all_args
            monitor_main()
        
    elif args.command == 'analyze':
        # Property analysis
        if args.args and args.args[0] == '--extract-properties':
            from utils.property_extractor import main as extract_main
            extract_main()
        else:
            print("Usage: mace analyze --extract-properties <directory>")
            
    # These commands are handled in the passthrough section above
    elif args.command in ['convert', 'opt2d12', 'opt2d3']:
        # Should never reach here, but just in case
        pass
            
    elif args.command == 'credits':
        # Credits already shown in banner if banner was displayed
        # Only show credits here if banner was suppressed
        if args.no_banner:
            if BANNER_AVAILABLE:
                print(get_credits())
            else:
                print("\nMACE Development Team:")
                print("Primary Developer: Marcus Djokic")
                print("Contributors: Daniel Maldonado Lopez, Brandon Lewis, Dr. William Comaskey")
                print("PI: Prof. Jose Luis Mendoza-Cortes")
            
    elif args.command == 'status':
        # Redirect to monitor --status for backward compatibility
        print("Note: 'mace status' has been merged into 'mace monitor --status'")
        args.command = 'monitor'
        args.args = ['--status'] + args.args
        # Re-process as monitor command
        sys.argv = [sys.argv[0], 'monitor', '--status'] + args.args
        main()  # Recursive call to handle as monitor
        return
    elif args.command == 'manager':
        # Enhanced Queue Manager command
        from queue.manager import EnhancedCrystalQueueManager
        
        # Combine all arguments
        all_args = args.args + remaining
        
        # Parse queue arguments
        max_jobs = 250
        reserve = 30
        callback_mode = None
        dry_run = False
        show_status = False
        base_dir = '.'
        
        i = 0
        while i < len(all_args):
            if all_args[i] == '--status':
                show_status = True
                i += 1
            elif all_args[i] == '--max-jobs' and i + 1 < len(all_args):
                max_jobs = int(all_args[i + 1])
                i += 2
            elif all_args[i] == '--reserve' and i + 1 < len(all_args):
                reserve = int(all_args[i + 1])
                i += 2
            elif all_args[i] == '--callback-mode' and i + 1 < len(all_args):
                callback_mode = all_args[i + 1]
                i += 2
            elif all_args[i] == '--dry-run':
                dry_run = True
                i += 1
            elif all_args[i] == '--d12-dir' and i + 1 < len(all_args):
                base_dir = all_args[i + 1]
                i += 2
            else:
                i += 1
        
        # Initialize queue manager
        manager = EnhancedCrystalQueueManager(
            d12_dir=base_dir,
            max_jobs=max_jobs, 
            reserve_slots=reserve
        )
        
        if show_status:
            # Show queue status using the check_queue method
            try:
                running, pending = manager.check_queue()
                available = max_jobs - running
                
                print("\n=== Queue Status ===")
                print(f"Running Jobs: {running}")
                print(f"Pending Jobs: {pending}")
                print(f"Available Slots: {available}")
                print(f"Max Jobs: {max_jobs}")
                print(f"Reserved Slots: {reserve}")
            except Exception as e:
                print("\n=== Queue Status ===")
                print(f"Error: Unable to check SLURM queue - {e}")
                print("\nNote: This command requires SLURM to be available.")
                print("On non-SLURM systems, use 'mace monitor --status' for database statistics.")
        else:
            # Run queue manager
            print(f"Running queue manager (max_jobs={max_jobs}, reserve={reserve})...")
            
            # The manager needs to be called with proper arguments
            from queue.manager import main as queue_main
            
            # Build argument list
            sys.argv = ['queue_manager.py', '--d12-dir', base_dir, 
                       '--max-jobs', str(max_jobs), '--reserve', str(reserve)]
            
            if callback_mode:
                sys.argv.extend(['--callback-mode', callback_mode])
            
            if dry_run:
                sys.argv.append('--dry-run')
                
            # Call the main function
            queue_main()
    
    elif args.command == 'queue':
        # Redirect to manager command for backward compatibility
        print("Note: 'mace queue' is deprecated. Use 'mace manager' instead.")
        print("This command will be removed in a future version.\n")
        args.command = 'manager'
        # Re-process as manager command
        sys.argv = [sys.argv[0], 'manager'] + args.args
        main()  # Recursive call to handle as manager
        return
        
    elif args.command == 'recover':
        # Error recovery command
        from recovery.recovery import main as recovery_main
        # Combine all arguments
        all_args = args.args + remaining
        sys.argv = ['recovery.py'] + all_args
        recovery_main()
        
    elif args.command == 'database':
        # Database management command
        from database.materials_contextual import ContextualMaterialDatabase
        import csv
        
        # Parse database arguments from remaining args
        all_args = args.args + remaining  # Combine positional and remaining args
        action = 'stats'
        material_id = None
        calc_type = None
        status = None
        export_csv = None
        
        i = 0
        while i < len(all_args):
            if all_args[i] == '--action' and i + 1 < len(all_args):
                action = all_args[i + 1]
                i += 2
            elif all_args[i] == '--material-id' and i + 1 < len(all_args):
                material_id = all_args[i + 1]
                i += 2
            elif all_args[i] == '--calc-type' and i + 1 < len(all_args):
                calc_type = all_args[i + 1]
                i += 2
            elif all_args[i] == '--status' and i + 1 < len(all_args):
                status = all_args[i + 1]
                i += 2
            elif all_args[i] == '--export-csv' and i + 1 < len(all_args):
                export_csv = all_args[i + 1]
                i += 2
            else:
                i += 1
        
        # Initialize database
        db = ContextualMaterialDatabase()
        
        # Debug: show what action was selected
        # print(f"DEBUG: Selected action = '{action}', all_args = {all_args}")
        
        if action == 'stats':
            # Show database statistics
            stats = db.get_database_stats()
            print("\n=== Database Statistics ===")
            print(f"Total Materials: {stats.get('total_materials', 0)}")
            
            # Calculate total calculations
            status_dist = stats.get('calculations_by_status', {})
            total_calcs = sum(status_dist.values())
            print(f"Total Calculations: {total_calcs}")
            
            # Get calculation types
            calc_types = stats.get('calculations_by_type', {})
            if calc_types:
                print("\nCalculation Types:")
                for calc_type, count in calc_types.items():
                    print(f"  {calc_type}: {count}")
            
            # Get status distribution
            status_dist = stats.get('calculations_by_status', {})
            if status_dist:
                print("\nStatus Distribution:")
                for status, count in status_dist.items():
                    print(f"  {status}: {count}")
            
            # Add hint about other actions
            print("\nUse --action query to list materials")
            print("Use --action export --export-csv FILE to export data")
                
        elif action == 'query':
            # Query database
            if material_id:
                material = db.get_material(material_id)
                if material:
                    print(f"\n=== Material: {material_id} ===")
                    for key, value in material.items():
                        if key != 'structure_json':  # Skip large JSON fields
                            print(f"{key}: {value}")
                    
                    # Get calculations
                    calcs = db.get_calculations_by_status(material_id=material_id)
                    if calcs:
                        print(f"\nCalculations ({len(calcs)}):")
                        for calc in calcs:
                            print(f"  {calc['calc_id']} ({calc['calc_type']}): {calc['status']}")
                else:
                    print(f"Material '{material_id}' not found")
            else:
                # General query - list all materials
                materials = db.get_all_materials()
                print(f"\n=== All Materials in Database ({len(materials)} total) ===")
                print(f"{'Material ID':<30} {'Formula':<20} {'Space Group':<15} {'Created':<20}")
                print("-" * 85)
                
                for mat in materials[:20]:  # Show first 20
                    material_id = mat['material_id'][:30]  # Truncate long IDs
                    formula = mat.get('formula', 'Unknown')[:20]
                    space_group = str(mat.get('space_group', 'Unknown'))[:15]
                    created = mat.get('created_at', 'Unknown')[:20]
                    print(f"{material_id:<30} {formula:<20} {space_group:<15} {created:<20}")
                    
                if len(materials) > 20:
                    print(f"\n... and {len(materials) - 20} more materials")
                    print("Use --material-id <ID> to see details for a specific material")
                    
        elif action == 'export':
            # Export to CSV
            if export_csv:
                materials = db.get_all_materials()
                with open(export_csv, 'w', newline='') as f:
                    if materials:
                        writer = csv.DictWriter(f, fieldnames=materials[0].keys())
                        writer.writeheader()
                        writer.writerows(materials)
                print(f"Exported {len(materials)} materials to {export_csv}")
            else:
                print("Please specify --export-csv FILE")
                
        elif action == 'clean':
            # Clean up orphaned records
            print("Database cleanup not yet implemented")
            
    elif args.command == 'engine':
        # Workflow engine command
        from workflow.engine import main as engine_main
        # Combine all arguments
        all_args = args.args + remaining
        sys.argv = ['engine.py'] + all_args
        engine_main()
        
    elif args.command == 'version':
        # Show version with main banner
        if BANNER_AVAILABLE:
            print_banner('banner')  # Use main banner
            print(f"\n    Version: {__version__}")
            print("    CRYSTAL Support: CRYSTAL17, CRYSTAL23")
        else:
            print(f"\nMACE v{__version__}")
            print("Mendoza Automated CRYSTAL Engine")
            print("CRYSTAL Support: CRYSTAL17, CRYSTAL23")

if __name__ == "__main__":
    main()